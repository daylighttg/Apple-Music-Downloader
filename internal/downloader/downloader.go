package downloader

import (
	"errors"
	"fmt"
	"main/internal/api"
	"main/internal/core"
	"main/internal/metadata"
	"main/internal/parser"
	"main/internal/ui"
	"main/internal/utils"
	"main/utils/lyrics"
	"main/utils/runv13"
	"main/utils/runv3"
	"main/utils/structs"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
	"sync"
	"time"

	"github.com/fatih/color"
)

// downloadTrackWithFallback attempts to download a track, falling back to other accounts on failure
func downloadTrackWithFallback(track structs.TrackData, meta *structs.AutoGenerated, albumId, storefront, baseSaveFolder, Codec, covPath string, workingAccounts []structs.Account, initialAccountIndex int, statusIndex int, updateStatus func(index int, status string, sColor func(a ...interface{}) string), progressChan chan runv13.ProgressUpdate) error {
	maxRetries := 3 // 每个账号最多重试次数
	var lastError error

	for i := 0; i < len(workingAccounts); i++ {
		accountIndex := (initialAccountIndex + i) % len(workingAccounts)
		account := &workingAccounts[accountIndex]

		for attempt := 0; attempt <= maxRetries; attempt++ {
			err := downloadTrackSilently(track, meta, albumId, storefront, baseSaveFolder, Codec, covPath, account, progressChan)
			if err == nil {
				return nil
			}
			lastError = err
			if attempt < maxRetries {
				time.Sleep(2 * time.Second)
			}
		}
		warningMsg := fmt.Sprintf("账户 %s 失败, 尝试下一个...", account.Name)
		updateStatus(statusIndex, warningMsg, color.New(color.FgRed).SprintFunc())
		time.Sleep(1 * time.Second)
	}

	return fmt.Errorf("所有可用账户均尝试失败: %w", lastError)
}

// downloadTrackSilently performs the actual download for a single track
func downloadTrackSilently(track structs.TrackData, meta *structs.AutoGenerated, albumId, storefront, baseSaveFolder, Codec, covPath string, account *structs.Account, progressChan chan runv13.ProgressUpdate) error {
	if track.Type == "music-videos" {
		if len(account.MediaUserToken) <= 50 {
			return errors.New("media-user-token is not set, skip MV dl")
		}
		if _, err := exec.LookPath("mp4decrypt"); err != nil {
			return errors.New("mp4decrypt is not found, skip MV dl")
		}

		var singerFoldername, albumFoldername string
		if core.Config.ArtistFolderFormat != "" {
			if strings.Contains(albumId, "pl.") {
				singerFoldername = strings.NewReplacer(
					"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
				).Replace(core.Config.ArtistFolderFormat)
			} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
				singerFoldername = strings.NewReplacer(
					"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
				).Replace(core.Config.ArtistFolderFormat)
			} else {
				singerFoldername = strings.NewReplacer(
					"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistId}", "",
				).Replace(core.Config.ArtistFolderFormat)
			}
		}

		Quality := "Video"
		MVCodec := "H.264"
		Tag_string := ""

		if strings.Contains(albumId, "pl.") {
			albumFoldername = strings.NewReplacer(
				"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
				"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", MVCodec, "{Tag}", Tag_string,
			).Replace(core.Config.PlaylistFolderFormat)
		} else {
			albumFoldername = strings.NewReplacer(
				"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
				"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
				"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
				"{Quality}", Quality, "{Codec}", MVCodec, "{Tag}", Tag_string,
			).Replace(core.Config.AlbumFolderFormat)
		}

		sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
		sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")

		err := MvDownloader(track.ID, baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, storefront, meta, account)
		if err != nil {
			return fmt.Errorf("failed to dl MV: %w", err)
		}
		return nil
	}

	manifest, err := api.GetInfoFromAdam(track.ID, account, storefront)
	if err != nil {
		return fmt.Errorf("failed to get manifest with account %s: %w", account.Name, err)
	}

	needDlAacLc := false
	if core.Dl_aac && *core.Aac_type == "aac-lc" {
		needDlAacLc = true
	}
	if manifest.Attributes.ExtendedAssetUrls.EnhancedHls == "" {
		if core.Dl_atmos {
			return errors.New("atmos unavailable")
		}
		needDlAacLc = true
	}
	needCheck := false

	if core.Config.GetM3u8Mode == "all" {
		needCheck = true
	} else if core.Config.GetM3u8Mode == "hires" && utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
		needCheck = true
	}
	var EnhancedHls_m3u8 string
	if needCheck && !needDlAacLc {
		EnhancedHls_m3u8, _ = parser.CheckM3u8(track.ID, "song", account)
		if strings.HasSuffix(EnhancedHls_m3u8, ".m3u8") {
			manifest.Attributes.ExtendedAssetUrls.EnhancedHls = EnhancedHls_m3u8
		}
	}
	var Quality string
	if strings.Contains(core.Config.SongFileFormat, "Quality") {
		if core.Dl_atmos {
			Quality = fmt.Sprintf("%dkbps", *core.Atmos_max-2000)
		} else if needDlAacLc {
			Quality = "256kbps"
		} else {
			_, Quality, _, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
			if err != nil {
				// Don't fail here, just proceed without quality tag
				Quality = ""
			}
		}
	}
	stringsToJoin := []string{}
	if track.Attributes.IsAppleDigitalMaster {
		if core.Config.AppleMasterChoice != "" {
			stringsToJoin = append(stringsToJoin, core.Config.AppleMasterChoice)
		}
	}
	if track.Attributes.ContentRating == "explicit" {
		if core.Config.ExplicitChoice != "" {
			stringsToJoin = append(stringsToJoin, core.Config.ExplicitChoice)
		}
	}
	if track.Attributes.ContentRating == "clean" {
		if core.Config.CleanChoice != "" {
			stringsToJoin = append(stringsToJoin, core.Config.CleanChoice)
		}
	}
	Tag_string := strings.Join(stringsToJoin, " ")

	trackNum := -1
	trackTotal := len(meta.Data[0].Relationships.Tracks.Data)
	for i, t := range meta.Data[0].Relationships.Tracks.Data {
		if t.ID == track.ID {
			trackNum = i + 1
			break
		}
	}
	if trackNum == -1 {
		return errors.New("track not found in metadata")
	}

	var singerFoldername, albumFoldername string
	if core.Config.ArtistFolderFormat != "" {
		if strings.Contains(albumId, "pl.") {
			singerFoldername = strings.NewReplacer(
				"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
			).Replace(core.Config.ArtistFolderFormat)
		} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
			).Replace(core.Config.ArtistFolderFormat)
		} else {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", "",
			).Replace(core.Config.ArtistFolderFormat)
		}
	}

	if strings.Contains(albumId, "pl.") {
		albumFoldername = strings.NewReplacer(
			"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.PlaylistFolderFormat)
	} else {
		albumFoldername = strings.NewReplacer(
			"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
			"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
			"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
			"{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.AlbumFolderFormat)
	}

	songName := strings.NewReplacer(
		"{SongId}", track.ID,
		"{SongNumer}", fmt.Sprintf("%02d", trackNum),
		"{SongName}", core.LimitString(track.Attributes.Name),
		"{DiscNumber}", fmt.Sprintf("%0d", track.Attributes.DiscNumber),
		"{TrackNumber}", fmt.Sprintf("%0d", track.Attributes.TrackNumber),
		"{Quality}", Quality,
		"{Tag}", Tag_string,
		"{Codec}", Codec,
	).Replace(core.Config.SongFileFormat)

	sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
	sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")
	sanitizedSongName := core.ForbiddenNames.ReplaceAllString(songName, "_")
	filenameWithExt := fmt.Sprintf("%s.m4a", sanitizedSongName)

	finalArtistDir, finalAlbumDir, finalFilename := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, filenameWithExt)
	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveFolder
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	os.MkdirAll(finalAlbumFolder, os.ModePerm)
	trackPath := filepath.Join(finalAlbumFolder, finalFilename)

	exists, err := utils.FileExists(trackPath)
	if err != nil {
		return errors.New("failed to check if track exists")
	}
	if exists {
		core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
		return nil
	}
	if needDlAacLc {
		if len(account.MediaUserToken) <= 50 {
			return errors.New("invalid media-user-token")
		}
		_, err := runv3.Run(track.ID, trackPath, core.DeveloperToken, account.MediaUserToken, false)
		if err != nil {
			return fmt.Errorf("failed to dl aac-lc: %w", err)
		}
	} else {
		trackM3u8Url, _, _, err := parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, false)
		if err != nil {
			return fmt.Errorf("failed to extract info from manifest: %w", err)
		}
		err = runv13.Run(track.ID, trackM3u8Url, trackPath, account, core.Config, progressChan)
		if err != nil {
			return fmt.Errorf("failed to run v12 with account %s: %w", account.Name, err)
		}
	}
	tags := []string{
		"tool=",
		fmt.Sprintf("artist=%s", meta.Data[0].Attributes.ArtistName),
	}
	var trackCovPath string
	if core.Config.EmbedCover {
		if strings.Contains(albumId, "pl.") && core.Config.DlAlbumcoverForPlaylist {
			_, _, safeCoverFilename := utils.EnsureSafePath(baseSaveFolder, finalArtistDir, finalAlbumDir, track.ID+".jpg")
			trackCovPath, err = metadata.WriteCover(finalAlbumFolder, strings.TrimSuffix(safeCoverFilename, ".jpg"), track.Attributes.Artwork.URL)
			if err != nil {
			}
			tags = append(tags, fmt.Sprintf("cover=%s", trackCovPath))
		} else {
			tags = append(tags, fmt.Sprintf("cover=%s", covPath))
		}
	}
	tagsString := strings.Join(tags, ":")
	cmd := exec.Command("MP4Box", "-quiet", "-itags", tagsString, trackPath)
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("embed failed: %w", err)
	}
	if strings.Contains(albumId, "pl.") && core.Config.DlAlbumcoverForPlaylist && trackCovPath != "" {
		if err := os.Remove(trackCovPath); err != nil {
			// Suppress error
		}
	}
	// **MODIFICATION**: Write metadata WITHOUT lyrics initially.
	err = metadata.WriteMP4Tags(trackPath, "", meta, trackNum, trackTotal)
	if err != nil {
		return fmt.Errorf("failed to write initial tags in media: %w", err)
	}

	core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
	return nil
}

// Rip is the main function to process and download an album/playlist
func Rip(albumId string, storefront string, urlArg_i string, urlRaw string) error {
	mainAccount, err := core.GetAccountForStorefront(storefront)
	if err != nil {
		return err
	}

	meta, err := api.GetMeta(albumId, mainAccount, storefront)
	if err != nil {
		return err
	}
	var lyricAccount *structs.Account
	for i := range core.Config.Accounts {
		acc := &core.Config.Accounts[i]
		if strings.ToLower(acc.Storefront) == strings.ToLower(storefront) {
			lyricAccount = acc
			break
		}
	}

	if lyricAccount == nil && core.Config.DefaultLyricStorefront != "" {
		for i := range core.Config.Accounts {
			acc := &core.Config.Accounts[i]
			if strings.ToLower(acc.Storefront) == strings.ToLower(core.Config.DefaultLyricStorefront) {
				lyricAccount = acc
				break
			}
		}
	}

	if core.Debug_mode {
		if len(meta.Data[0].Relationships.Tracks.Data) > 0 {
			firstTrack := meta.Data[0].Relationships.Tracks.Data[0]
			manifest, err := api.GetInfoFromAdam(firstTrack.ID, mainAccount, storefront)
			if err == nil && manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
				_, _, _, _ = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
			}
		}
		return nil
	}

	var Codec string
	if core.Dl_atmos {
		Codec = "ATMOS"
	} else if core.Dl_aac {
		Codec = "AAC"
	} else {
		Codec = "ALAC"
	}

	var baseSaveFolder string
	if core.Dl_atmos {
		baseSaveFolder = core.Config.AtmosSaveFolder
	} else {
		baseSaveFolder = core.Config.AlacSaveFolder
	}

	var singerFoldername, albumFoldername string
	if core.Config.ArtistFolderFormat != "" {
		if strings.Contains(albumId, "pl.") {
			singerFoldername = strings.NewReplacer(
				"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
			).Replace(core.Config.ArtistFolderFormat)
		} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
			).Replace(core.Config.ArtistFolderFormat)
		} else {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", "",
			).Replace(core.Config.ArtistFolderFormat)
		}
	}

	var Quality string
	Tag_string := ""

	if strings.Contains(albumId, "pl.") {
		albumFoldername = strings.NewReplacer(
			"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.PlaylistFolderFormat)
	} else {
		albumFoldername = strings.NewReplacer(
			"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
			"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
			"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
			"{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.AlbumFolderFormat)
	}

	sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
	sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")

	var longestFilename string
	for i := range meta.Data[0].Relationships.Tracks.Data {
		if len(meta.Data[0].Relationships.Tracks.Data[i].Attributes.Name) > len(longestFilename) {
			longestFilename = meta.Data[0].Relationships.Tracks.Data[i].Attributes.Name
		}
	}
	longestFilename = strings.NewReplacer(
		"{SongName}", longestFilename,
		"{SongNumer}", "99",
		"{Quality}", "24B-192.0kHz",
		"{Tag}", core.Config.AppleMasterChoice+" "+core.Config.ExplicitChoice,
		"{Codec}", "ATMOS",
	).Replace(core.Config.SongFileFormat) + ".m4a"

	finalArtistDir, finalAlbumDir, _ := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, longestFilename)

	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveFolder
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	os.MkdirAll(finalAlbumFolder, os.ModePerm)

	fmt.Printf("歌手: %s\n", meta.Data[0].Attributes.ArtistName)
	fmt.Printf("专辑: %s\n", meta.Data[0].Attributes.Name)

	if core.Config.SaveArtistCover && !(strings.Contains(albumId, "pl.")) {
		if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			_, err = metadata.WriteCover(finalSingerFolder, "folder", meta.Data[0].Relationships.Artists.Data[0].Attributes.Artwork.Url)
			if err != nil {
			}
		}
	}
	covPath, err := metadata.WriteCover(finalAlbumFolder, "cover", meta.Data[0].Attributes.Artwork.URL)
	if err != nil {
	}
	if core.Config.SaveAnimatedArtwork && meta.Data[0].Attributes.EditorialVideo.MotionDetailSquare.Video != "" {
		motionvideoUrlSquare, err := parser.ExtractVideo(meta.Data[0].Attributes.EditorialVideo.MotionDetailSquare.Video)
		if err == nil {
			exists, _ := utils.FileExists(filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"))
			if !exists {
				cmd := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", motionvideoUrlSquare, "-c", "copy", filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"))
				_ = cmd.Run()
			}
		}

		if core.Config.EmbyAnimatedArtwork {
			cmd3 := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"), "-vf", "scale=440:-1", "-r", "24", "-f", "gif", filepath.Join(finalAlbumFolder, "folder.jpg"))
			_ = cmd3.Run()
		}

		motionvideoUrlTall, err := parser.ExtractVideo(meta.Data[0].Attributes.EditorialVideo.MotionDetailTall.Video)
		if err == nil {
			exists, _ := utils.FileExists(filepath.Join(finalAlbumFolder, "tall_animated_artwork.mp4"))
			if !exists {
				cmd := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", motionvideoUrlTall, "-c", "copy", filepath.Join(finalAlbumFolder, "tall_animated_artwork.mp4"))
				_ = cmd.Run()
			}
		}
	}

	selected := ui.SelectTracks(meta, storefront, urlArg_i)

	fmt.Println("正在进行版权预检，请稍候...")
	var workingAccounts []structs.Account
	if len(meta.Data[0].Relationships.Tracks.Data) > 0 {
		firstTrackId := meta.Data[0].Relationships.Tracks.Data[0].ID
		for _, acc := range core.Config.Accounts {
			_, err := api.GetInfoFromAdam(firstTrackId, &acc, acc.Storefront)
			if err == nil {
				workingAccounts = append(workingAccounts, acc)
			} else {
				fmt.Printf("账户 [%s] 无法访问此专辑 (可能无版权)，本次任务将跳过该账户。\n", acc.Name)
			}
		}
	} else {
		return errors.New("专辑中没有曲目")
	}

	if len(workingAccounts) == 0 {
		return errors.New("所有账户均无法访问此专辑，任务中止")
	}

	albumQualityType := "AAC"
	albumQualityString := "AAC"
	isHires := false
	isLossless := false

	for _, trackIndex := range selected {
		track := meta.Data[0].Relationships.Tracks.Data[trackIndex-1]
		if utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
			isHires = true
			break
		}
		if utils.Contains(track.Attributes.AudioTraits, "lossless") {
			isLossless = true
		}
	}

	if isHires {
		albumQualityType = "Hi-Res Lossless"
		albumQualityString = "Hi-Res Lossless"
	} else if isLossless {
		albumQualityType = "Lossless"
		albumQualityString = "Lossless"
	}

	var numThreads int
	switch albumQualityType {
	case "Hi-Res Lossless":
		numThreads = core.Config.HiresDownloadThreads
	case "Lossless":
		numThreads = core.Config.LosslessDownloadThreads
	default: // "AAC"
		numThreads = core.Config.AacDownloadThreads
	}

	if numThreads < 1 {
		numThreads = 1
	}

	regionSet := make(map[string]bool)
	for _, acc := range workingAccounts {
		if acc.Storefront != "" {
			regionSet[strings.ToUpper(acc.Storefront)] = true
		}
	}
	var regionNames []string
	for r := range regionSet {
		regionNames = append(regionNames, r)
	}
	sort.Strings(regionNames)
	regionsStr := strings.Join(regionNames, " / ")

	yellow := color.New(color.FgYellow).SprintFunc()
	green := color.New(color.FgGreen).SprintFunc()
	fmt.Printf("%s %s | %s | %s | %s\n",
		green("音源:"),
		green(albumQualityString),
		green(fmt.Sprintf("%d 线程", numThreads)),
		yellow(regionsStr),
		green(fmt.Sprintf("%d 个账户并行下载", len(workingAccounts))),
	)
	fmt.Println(strings.Repeat("-", 50))

	core.TrackStatuses = make([]core.TrackStatus, len(selected))
	for i, trackNum := range selected {
		track := meta.Data[0].Relationships.Tracks.Data[trackNum-1]
		manifest, err := api.GetInfoFromAdam(track.ID, mainAccount, storefront)
		quality := "N/A"
		if err == nil && manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
			_, _, quality, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, false)
			if err != nil {
				quality = "获取失败"
			}
		} else {
			quality = "AAC 256kbps"
		}

		core.TrackStatuses[i] = core.TrackStatus{
			Index:       i,
			TrackNum:    trackNum,
			TrackTotal:  len(meta.Data[0].Relationships.Tracks.Data),
			TrackName:   track.Attributes.Name,
			Quality:     fmt.Sprintf("(%s)", quality),
			Status:      "等待中",
			StatusColor: color.New(color.FgWhite).SprintFunc(),
		}
	}

	doneUI := make(chan struct{})
	go ui.RenderUI(doneUI)

	var wg sync.WaitGroup
	semaphore := make(chan struct{}, numThreads)

	for i, trackNum := range selected {
		wg.Add(1)
		go func(trackIndexInMeta int, statusIndex int) {
			semaphore <- struct{}{}
			defer func() {
				<-semaphore
				wg.Done()
			}()

			trackData := meta.Data[0].Relationships.Tracks.Data[trackIndexInMeta-1]

			core.SharedLock.Lock()
			isDone := utils.IsInArray(core.OkDict[albumId], trackIndexInMeta)
			core.SharedLock.Unlock()

			if isDone {
				ui.UpdateStatus(statusIndex, "已存在", color.New(color.FgCyan).SprintFunc())
				core.SharedLock.Lock()
				core.Counter.Total++
				core.Counter.Success++
				core.SharedLock.Unlock()
				return
			}

			red := color.New(color.FgRed).SprintFunc()
			yellow := color.New(color.FgYellow).SprintFunc()
			progressChan := make(chan runv13.ProgressUpdate, 10)
			go func() {
				for p := range progressChan {
					speedStr := utils.FormatSpeed(p.SpeedBPS)
					account := &workingAccounts[statusIndex%len(workingAccounts)]
					accountInfo := fmt.Sprintf("%s 账号", strings.ToUpper(account.Storefront))
					var status string
					if p.Stage == "decrypt" {
						status = fmt.Sprintf("%s %s %d%% (%s)", yellow(accountInfo), red("解密中"), p.Percentage, speedStr)
					} else {
						status = fmt.Sprintf("%s 下载中 %d%% (%s)", yellow(accountInfo), p.Percentage, speedStr)
					}
					ui.UpdateStatus(statusIndex, status, color.New(color.FgYellow).SprintFunc())
				}
			}()

			err := downloadTrackWithFallback(trackData, meta, albumId, storefront, baseSaveFolder, Codec, covPath, workingAccounts, statusIndex, statusIndex, ui.UpdateStatus, progressChan)

			core.SharedLock.Lock()
			core.Counter.Total++
			if err != nil {
				ui.UpdateStatus(statusIndex, fmt.Sprintf("下载失败: %v", err), color.New(color.FgRed).SprintFunc())
				core.Counter.Error++
				core.SharedLock.Unlock()
				return
			}
			var trackPath string
			{
				manifest, _ := api.GetInfoFromAdam(trackData.ID, mainAccount, storefront)
				var Quality string
				if manifest != nil && strings.Contains(core.Config.SongFileFormat, "Quality") {
					if core.Dl_atmos {
						Quality = fmt.Sprintf("%dkbps", *core.Atmos_max-2000)
					} else if core.Dl_aac && *core.Aac_type == "aac-lc" {
						Quality = "256kbps"
					} else {
						_, Quality, _, _ = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
					}
				}
				stringsToJoin := []string{}
				if trackData.Attributes.IsAppleDigitalMaster {
					if core.Config.AppleMasterChoice != "" {
						stringsToJoin = append(stringsToJoin, core.Config.AppleMasterChoice)
					}
				}
				if trackData.Attributes.ContentRating == "explicit" {
					if core.Config.ExplicitChoice != "" {
						stringsToJoin = append(stringsToJoin, core.Config.ExplicitChoice)
					}
				}
				if trackData.Attributes.ContentRating == "clean" {
					if core.Config.CleanChoice != "" {
						stringsToJoin = append(stringsToJoin, core.Config.CleanChoice)
					}
				}
				Tag_string := strings.Join(stringsToJoin, " ")
				songName := strings.NewReplacer("{SongId}", trackData.ID, "{SongNumer}", fmt.Sprintf("%02d", trackIndexInMeta), "{SongName}", core.LimitString(trackData.Attributes.Name), "{DiscNumber}", fmt.Sprintf("%0d", trackData.Attributes.DiscNumber), "{TrackNumber}", fmt.Sprintf("%0d", trackData.Attributes.TrackNumber), "{Quality}", Quality, "{Tag}", Tag_string, "{Codec}", Codec).Replace(core.Config.SongFileFormat)
				sanitizedSongName := core.ForbiddenNames.ReplaceAllString(songName, "_")
				filenameWithExt := fmt.Sprintf("%s.m4a", sanitizedSongName)
				_, _, finalFilename := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, filenameWithExt)
				trackPath = filepath.Join(finalAlbumFolder, finalFilename)
			}

			var finalLrc string
			if lyricAccount != nil && (core.Config.EmbedLrc || core.Config.SaveLrcFile) {
				lrcStr, lrcErr := lyrics.Get(storefront, trackData.ID, core.Config.LrcType, core.Config.Language, core.Config.LrcFormat, core.DeveloperToken, lyricAccount.MediaUserToken)
				if lrcErr == nil {
					finalLrc = lrcStr
					if core.Config.SaveLrcFile {
						lrcFilename := fmt.Sprintf("%s.lrc", strings.TrimSuffix(filepath.Base(trackPath), filepath.Ext(filepath.Base(trackPath))))
						_ = metadata.WriteLyrics(filepath.Dir(trackPath), lrcFilename, finalLrc)
					}
					if core.Config.EmbedLrc {
						// Suppress error printing
						_ = metadata.WriteMP4Tags(trackPath, finalLrc, meta, trackIndexInMeta, len(meta.Data[0].Relationships.Tracks.Data))
					}
				}
			}

			ui.UpdateStatus(statusIndex, "下载完成", color.New(color.FgGreen).SprintFunc())
			core.Counter.Success++
			core.SharedLock.Unlock()

		}(trackNum, i)
	}

	wg.Wait()
	close(doneUI)
	time.Sleep(200 * time.Millisecond)
	ui.PrintUI()

	fmt.Println(strings.Repeat("-", 50))
	return nil
}

// MvDownloader handles the entire process of downloading a music video
func MvDownloader(adamID string, baseSaveDir, artistDir, albumDir string, storefront string, meta *structs.AutoGenerated, account *structs.Account) error {
	MVInfo, err := api.GetMVInfoFromAdam(adamID, account, storefront)
	if err != nil {
		return err
	}

	var trackTotal int
	var trackNum int
	var index int
	if meta != nil {
		trackTotal = len(meta.Data[0].Relationships.Tracks.Data)
		for i, track := range meta.Data[0].Relationships.Tracks.Data {
			if adamID == track.ID {
				index = i
				trackNum = i + 1
			}
		}
	}

	var mvSaveName string
	if meta != nil && trackNum > 0 {
		mvSaveName = fmt.Sprintf("%02d. %s", trackNum, MVInfo.Data[0].Attributes.Name)
	} else {
		mvSaveName = MVInfo.Data[0].Attributes.Name
	}

	sanitizedMvSaveName := core.ForbiddenNames.ReplaceAllString(mvSaveName, "_")
	filenameWithExt := fmt.Sprintf("%s.mp4", sanitizedMvSaveName)

	finalArtistDir, finalAlbumDir, finalFilename := utils.EnsureSafePath(baseSaveDir, artistDir, albumDir, filenameWithExt)

	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveDir, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveDir
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	mvOutPath := filepath.Join(finalAlbumFolder, finalFilename)
	os.MkdirAll(finalAlbumFolder, os.ModePerm)
	exists, _ := utils.FileExists(mvOutPath)
	if exists {
		return nil
	}

	mvm3u8url, _, err := runv3.GetWebplayback(adamID, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return fmt.Errorf("获取MV播放列表失败: %w", err)
	}
	if mvm3u8url == "" {
		return errors.New("media-user-token may be wrong or expired")
	}

	vidPath := filepath.Join(finalAlbumFolder, fmt.Sprintf("%s_vid.mp4", adamID))
	audPath := filepath.Join(finalAlbumFolder, fmt.Sprintf("%s_aud.mp4", adamID))

	videom3u8url, err := parser.ExtractVideo(mvm3u8url)
	if err != nil {
		return fmt.Errorf("提取视频流URL失败: %w", err)
	}
	videokeyAndUrls, err := runv3.Run(adamID, videom3u8url, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return fmt.Errorf("获取视频密钥和URL失败: %w", err)
	}
	err = runv3.ExtMvData(videokeyAndUrls, vidPath)
	if err != nil {
		return fmt.Errorf("下载或解密视频数据失败: %w", err)
	}

	audiom3u8url, err := parser.ExtractMvAudio(mvm3u8url)
	if err != nil {
		return fmt.Errorf("提取音频流URL失败: %w", err)
	}
	audiokeyAndUrls, err := runv3.Run(adamID, audiom3u8url, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return fmt.Errorf("获取音频密钥和URL失败: %w", err)
	}
	err = runv3.ExtMvData(audiokeyAndUrls, audPath)
	if err != nil {
		return fmt.Errorf("下载或解密音频数据失败: %w", err)
	}

	tags := []string{
		"tool=",
		fmt.Sprintf("artist=%s", MVInfo.Data[0].Attributes.ArtistName),
		fmt.Sprintf("title=%s", MVInfo.Data[0].Attributes.Name),
		fmt.Sprintf("genre=%s", MVInfo.Data[0].Attributes.GenreNames[0]),
		fmt.Sprintf("created=%s", MVInfo.Data[0].Attributes.ReleaseDate),
		fmt.Sprintf("ISRC=%s", MVInfo.Data[0].Attributes.Isrc),
	}

	if MVInfo.Data[0].Attributes.ContentRating == "explicit" {
		tags = append(tags, "rating=1")
	} else if MVInfo.Data[0].Attributes.ContentRating == "clean" {
		tags = append(tags, "rating=2")
	} else {
		tags = append(tags, "rating=0")
	}

	if meta != nil {
		if meta.Data[0].Type == "playlists" && !core.Config.UseSongInfoForPlaylist {
			tags = append(tags, "disk=1/1", fmt.Sprintf("album=%s", meta.Data[0].Attributes.Name), fmt.Sprintf("track=%d", trackNum), fmt.Sprintf("tracknum=%d/%d", trackNum, trackTotal), fmt.Sprintf("album_artist=%s", meta.Data[0].Attributes.ArtistName), fmt.Sprintf("performer=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.ArtistName), fmt.Sprintf("copyright=%s", meta.Data[0].Attributes.Copyright), fmt.Sprintf("UPC=%s", meta.Data[0].Attributes.Upc))
		} else {
			tags = append(tags, fmt.Sprintf("album=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.AlbumName), fmt.Sprintf("disk=%d/%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.DiscNumber, meta.Data[0].Relationships.Tracks.Data[trackTotal-1].Attributes.DiscNumber), fmt.Sprintf("track=%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.TrackNumber), fmt.Sprintf("tracknum=%d/%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.TrackNumber, meta.Data[0].Attributes.TrackCount), fmt.Sprintf("album_artist=%s", meta.Data[0].Attributes.ArtistName), fmt.Sprintf("performer=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.ArtistName), fmt.Sprintf("copyright=%s", meta.Data[0].Attributes.Copyright), fmt.Sprintf("UPC=%s", meta.Data[0].Attributes.Upc))
		}
	} else {
		tags = append(tags, fmt.Sprintf("album=%s", MVInfo.Data[0].Attributes.AlbumName), fmt.Sprintf("disk=%d", MVInfo.Data[0].Attributes.DiscNumber), fmt.Sprintf("track=%d", MVInfo.Data[0].Attributes.TrackNumber), fmt.Sprintf("tracknum=%d", MVInfo.Data[0].Attributes.TrackNumber), fmt.Sprintf("performer=%s", MVInfo.Data[0].Attributes.ArtistName))
	}

	var covPath string
	if true {
		thumbURL := MVInfo.Data[0].Attributes.Artwork.URL
		baseThumbName := core.ForbiddenNames.ReplaceAllString(mvSaveName, "_") + "_thumbnail"
		covPath, err = metadata.WriteCover(finalAlbumFolder, baseThumbName, thumbURL)
		if err == nil {
			tags = append(tags, fmt.Sprintf("cover=%s", covPath))
		}
	}

	tagsString := strings.Join(tags, ":")
	muxCmd := exec.Command("MP4Box", "-itags", tagsString, "-quiet", "-add", vidPath, "-add", audPath, "-keep-utc", "-new", mvOutPath)
	if err := muxCmd.Run(); err != nil {
		return err
	}
	defer os.Remove(vidPath)
	defer os.Remove(audPath)
	if covPath != "" {
		defer os.Remove(covPath)
	}
	return nil
}

