package downloader

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"main/internal/api"
	"main/internal/core"
	"main/internal/metadata"
	"main/internal/parser"
	"main/internal/ui"
	"main/internal/utils"
	"main/utils/lyrics"
	"main/utils/runv14"
	"main/utils/runv3"
	"main/utils/structs"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
	"sync"
	"time"

	"github.com/fatih/color"
)

// GetCacheBasePath 根据是否启用缓存返回基础路径
// 返回值: (实际使用的路径, 最终目标路径, 是否使用缓存)
func GetCacheBasePath(targetPath, albumId string) (string, string, bool) {
	if !core.Config.EnableCache {
		return targetPath, targetPath, false
	}

	// 创建唯一的缓存子目录（使用albumId的hash避免冲突）
	hash := sha256.Sum256([]byte(albumId + targetPath))
	cacheSubDir := hex.EncodeToString(hash[:])[:16]
	cachePath := filepath.Join(core.Config.CacheFolder, cacheSubDir)

	// 确保缓存目录存在
	os.MkdirAll(cachePath, os.ModePerm)

	return cachePath, targetPath, true
}

// SafeMoveFile 导出utils包中的SafeMoveFile函数，方便外部调用
func SafeMoveFile(src, dst string) error {
	return utils.SafeMoveFile(src, dst)
}

func checkAndReEncodeTrack(trackPath string, statusIndex int) (bool, error) {
	ui.UpdateStatus(statusIndex, "正在检测...", color.New(color.FgCyan).SprintFunc())
	checkArgs := strings.Fields(core.Config.FfmpegCheckArgs)
	cmdCheckArgs := append([]string{"-i", trackPath}, checkArgs...)
	checkCmd := exec.Command("ffmpeg", cmdCheckArgs...)

	var stderr bytes.Buffer
	checkCmd.Stderr = &stderr
	err := checkCmd.Run()

	if err == nil && stderr.Len() == 0 {
		return false, nil
	}

	ui.UpdateStatus(statusIndex, "文件损坏, 正在重新编码...", color.New(color.FgRed).SprintFunc())

	tempTrackPath := trackPath + ".fixed.m4a"
	defer os.Remove(tempTrackPath)

	encodeArgs := strings.Fields(core.Config.FfmpegEncodeArgs)
	cmdEncodeArgs := append([]string{"-i", trackPath}, encodeArgs...)
	cmdEncodeArgs = append(cmdEncodeArgs, tempTrackPath)

	encodeCmd := exec.Command("ffmpeg", cmdEncodeArgs...)
	var encodeStderr bytes.Buffer
	encodeCmd.Stderr = &encodeStderr
	err = encodeCmd.Run()

	if err != nil {
		return true, fmt.Errorf("重新编码失败: %v, FFMPEG输出: %s", err, encodeStderr.String())
	}

	if err := os.Remove(trackPath); err != nil {
		return true, fmt.Errorf("删除损坏的原文件失败: %w", err)
	}
	if err := os.Rename(tempTrackPath, trackPath); err != nil {
		return true, fmt.Errorf("替换为修复文件失败: %w", err)
	}

	return true, nil
}

func downloadTrackWithFallback(track structs.TrackData, meta *structs.AutoGenerated, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath string, workingAccounts []structs.Account, initialAccountIndex int, statusIndex int, updateStatus func(index int, status string, sColor func(a ...interface{}) string), progressChan chan runv14.ProgressUpdate) (string, error) {
	maxRetries := 3 // 每个账号最多重试次数
	var lastError error

	for i := 0; i < len(workingAccounts); i++ {
		accountIndex := (initialAccountIndex + i) % len(workingAccounts)
		account := &workingAccounts[accountIndex]

		for attempt := 0; attempt <= maxRetries; attempt++ {
			trackPath, err := downloadTrackSilently(track, meta, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath, account, progressChan)
			if err == nil {
				return trackPath, nil
			}
			lastError = err
			if attempt < maxRetries {
				time.Sleep(2 * time.Second)
			}
		}
		warningMsg := fmt.Sprintf("账户 %s 失败, 尝试下一个...", account.Name)
		updateStatus(statusIndex, warningMsg, color.New(color.FgRed).SprintFunc())
		time.Sleep(1 * time.Second)
	}

	return "", fmt.Errorf("所有可用账户均尝试失败: %w", lastError)
}

func downloadTrackSilently(track structs.TrackData, meta *structs.AutoGenerated, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath string, account *structs.Account, progressChan chan runv14.ProgressUpdate) (string, error) {
	if track.Type == "music-videos" {
		if !core.Config.DownloadVideos {
			core.OkDict[albumId] = append(core.OkDict[albumId], -1)
			return "", nil
		}

		if len(account.MediaUserToken) <= 50 {
			return "", errors.New("media-user-token is not set, skip MV dl")
		}
		if _, err := exec.LookPath("mp4decrypt"); err != nil {
			return "", errors.New("mp4decrypt is not found, skip MV dl")
		}

		var singerFoldername, albumFoldername string
		if core.Config.ArtistFolderFormat != "" {
			if strings.Contains(albumId, "pl.") {
				singerFoldername = strings.NewReplacer(
					"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
				).Replace(core.Config.ArtistFolderFormat)
			} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
				singerFoldername = strings.NewReplacer(
					"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
				).Replace(core.Config.ArtistFolderFormat)
			} else {
				singerFoldername = strings.NewReplacer(
					"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistId}", "",
				).Replace(core.Config.ArtistFolderFormat)
			}
		}

		Quality := "Video"
		MVCodec := "H.264"
		Tag_string := ""

		if strings.Contains(albumId, "pl.") {
			albumFoldername = strings.NewReplacer(
				"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
				"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", MVCodec, "{Tag}", Tag_string,
			).Replace(core.Config.PlaylistFolderFormat)
		} else {
			albumFoldername = strings.NewReplacer(
				"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
				"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
				"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
				"{Quality}", Quality, "{Codec}", MVCodec, "{Tag}", Tag_string,
			).Replace(core.Config.AlbumFolderFormat)
		}

		sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
		sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")

		// Use MVSaveFolder if configured, otherwise fallback to baseSaveFolder
		mvSaveFolder := core.Config.MVSaveFolder
		if mvSaveFolder == "" {
			mvSaveFolder = baseSaveFolder
		}

		// 如果使用缓存，需要为MV计算缓存路径和检查最终目标路径
		actualMvSaveFolder := mvSaveFolder
		checkMvSaveFolder := mvSaveFolder
		if finalSaveFolder != baseSaveFolder {
			// 正在使用缓存
			if core.Config.MVSaveFolder != "" {
				// MV有单独的保存路径，需要计算缓存路径
				mvCachePath, mvFinalPath, _ := GetCacheBasePath(core.Config.MVSaveFolder, albumId)
				actualMvSaveFolder = mvCachePath
				checkMvSaveFolder = mvFinalPath
			} else {
				// MV使用与音频相同的路径
				actualMvSaveFolder = baseSaveFolder
				checkMvSaveFolder = finalSaveFolder
			}

			// 检查最终目标路径是否已存在MV文件
			mvName := core.LimitString(track.Attributes.Name)
			var releaseYear string
			if len(track.Attributes.ReleaseDate) >= 4 {
				releaseYear = track.Attributes.ReleaseDate[:4]
			}
			var mvFolderName, mvFileName string
			if releaseYear != "" {
				mvFolderName = fmt.Sprintf("%s (%s)", mvName, releaseYear)
				mvFileName = fmt.Sprintf("%s (%s).mp4", mvName, releaseYear)
			} else {
				mvFolderName = mvName
				mvFileName = fmt.Sprintf("%s.mp4", mvName)
			}
			sanitizedMvFolderName := core.ForbiddenNames.ReplaceAllString(mvFolderName, "_")
			sanitizedMvFileName := core.ForbiddenNames.ReplaceAllString(mvFileName, "_")

			checkArtistDir, checkMvDir, checkFilename := utils.EnsureSafePath(
				checkMvSaveFolder, sanitizedSingerFolder, sanitizedMvFolderName, sanitizedMvFileName,
			)
			var checkSingerFolder string
			if checkArtistDir != "" {
				checkSingerFolder = filepath.Join(checkMvSaveFolder, checkArtistDir)
			} else {
				checkSingerFolder = checkMvSaveFolder
			}
			checkMvFolder := filepath.Join(checkSingerFolder, checkMvDir)
			checkMvPath := filepath.Join(checkMvFolder, checkFilename)

			exists, _ := utils.FileExists(checkMvPath)
			if exists {
				// MV已存在于最终目标位置，跳过下载
				core.OkDict[albumId] = append(core.OkDict[albumId], -1)
				return "", nil
			}
		}

		mvOutPath, err := MvDownloader(track.ID, actualMvSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, storefront, meta, account)
		if err != nil {
			return "", fmt.Errorf("failed to dl MV: %w", err)
		}
		return mvOutPath, nil
	}

	manifest, err := api.GetInfoFromAdam(track.ID, account, storefront)
	if err != nil {
		return "", fmt.Errorf("failed to get manifest with account %s: %w", account.Name, err)
	}

	needDlAacLc := false
	if core.Dl_aac && *core.Aac_type == "aac-lc" {
		needDlAacLc = true
	}
	if manifest.Attributes.ExtendedAssetUrls.EnhancedHls == "" {
		if core.Dl_atmos {
			return "", errors.New("atmos unavailable")
		}
		needDlAacLc = true
	}
	needCheck := false

	if core.Config.GetM3u8Mode == "all" {
		needCheck = true
	} else if core.Config.GetM3u8Mode == "hires" && utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
		needCheck = true
	}
	var EnhancedHls_m3u8 string
	if needCheck && !needDlAacLc {
		EnhancedHls_m3u8, _ = parser.CheckM3u8(track.ID, "song", account)
		if strings.HasSuffix(EnhancedHls_m3u8, ".m3u8") {
			manifest.Attributes.ExtendedAssetUrls.EnhancedHls = EnhancedHls_m3u8
		}
	}
	var Quality string
	if strings.Contains(core.Config.SongFileFormat, "Quality") {
		if core.Dl_atmos {
			Quality = fmt.Sprintf("%dkbps", *core.Atmos_max-2000)
		} else if needDlAacLc {
			Quality = "256kbps"
		} else {
			_, Quality, _, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
			if err != nil {
				Quality = ""
			}
		}
	}
	// Determine quality tag using FormatQualityTag()
	// {Tag} variable is specifically for audio quality (Dolby Atmos, Hi-Res Lossless, Alac, Aac 256)
	var Tag_string string
	if core.Dl_atmos {
		Tag_string = utils.FormatQualityTag("Dolby Atmos")
	} else if needDlAacLc {
		Tag_string = utils.FormatQualityTag("Aac 256")
	} else {
		// For lossless, check if it's Hi-Res based on audio traits
		if utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
			Tag_string = utils.FormatQualityTag("Hi-Res Lossless")
		} else if utils.Contains(track.Attributes.AudioTraits, "lossless") {
			Tag_string = utils.FormatQualityTag("Alac")
		} else {
			Tag_string = utils.FormatQualityTag("Aac 256")
		}
	}

	trackNum := -1
	for i, t := range meta.Data[0].Relationships.Tracks.Data {
		if t.ID == track.ID {
			trackNum = i + 1
			break
		}
	}
	if trackNum == -1 {
		return "", errors.New("track not found in metadata")
	}

	var singerFoldername, albumFoldername string
	if core.Config.ArtistFolderFormat != "" {
		if strings.Contains(albumId, "pl.") {
			singerFoldername = strings.NewReplacer(
				"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
			).Replace(core.Config.ArtistFolderFormat)
		} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
			).Replace(core.Config.ArtistFolderFormat)
		} else {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", "",
			).Replace(core.Config.ArtistFolderFormat)
		}
	}

	if strings.Contains(albumId, "pl.") {
		albumFoldername = strings.NewReplacer(
			"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.PlaylistFolderFormat)
	} else {
		albumFoldername = strings.NewReplacer(
			"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
			"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
			"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
			"{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.AlbumFolderFormat)
	}

	songName := strings.NewReplacer(
		"{SongId}", track.ID,
		"{SongNumer}", fmt.Sprintf("%02d", trackNum),
		"{SongName}", core.LimitString(track.Attributes.Name),
		"{DiscNumber}", fmt.Sprintf("%0d", track.Attributes.DiscNumber),
		"{TrackNumber}", fmt.Sprintf("%0d", track.Attributes.TrackNumber),
		"{Quality}", Quality,
		"{Tag}", Tag_string,
		"{Codec}", Codec,
	).Replace(core.Config.SongFileFormat)

	sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
	sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")
	sanitizedSongName := core.ForbiddenNames.ReplaceAllString(songName, "_")
	filenameWithExt := fmt.Sprintf("%s.m4a", sanitizedSongName)

	finalArtistDir, finalAlbumDir, finalFilename := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, filenameWithExt)
	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveFolder
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	os.MkdirAll(finalAlbumFolder, os.ModePerm)
	trackPath := filepath.Join(finalAlbumFolder, finalFilename)

	// 检查文件是否存在：如果使用缓存，检查最终目标路径；否则检查当前路径
	checkPath := trackPath
	returnPath := trackPath
	if finalSaveFolder != baseSaveFolder {
		// 使用缓存时，检查最终目标路径是否已存在文件
		var targetSingerFolder string
		if finalArtistDir != "" {
			targetSingerFolder = filepath.Join(finalSaveFolder, finalArtistDir)
		} else {
			targetSingerFolder = finalSaveFolder
		}
		targetAlbumFolder := filepath.Join(targetSingerFolder, finalAlbumDir)
		checkPath = filepath.Join(targetAlbumFolder, finalFilename)
		returnPath = checkPath // 如果文件已存在，返回最终目标路径而非缓存路径
	}

	exists, err := utils.FileExists(checkPath)
	if err != nil {
		return "", errors.New("failed to check if track exists")
	}
	if exists {
		core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
		return returnPath, nil // 返回实际存在文件的路径
	}

	if needDlAacLc {
		if len(account.MediaUserToken) <= 50 {
			return "", errors.New("invalid media-user-token")
		}
		_, err := runv3.Run(track.ID, trackPath, core.DeveloperToken, account.MediaUserToken, false)
		if err != nil {
			return "", fmt.Errorf("failed to dl aac-lc: %w", err)
		}
	} else {
		trackM3u8Url, _, _, err := parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, false)
		if err != nil {
			return "", fmt.Errorf("failed to extract info from manifest: %w", err)
		}
		err = runv14.Run(track.ID, trackM3u8Url, trackPath, account, core.Config, progressChan)
		if err != nil {
			return "", fmt.Errorf("failed to run v14 with account %s: %w", account.Name, err)
		}
	}

	tags := []string{
		"tool=",
	}
	var trackCovPath string
	if core.Config.EmbedCover {
		if strings.Contains(albumId, "pl.") && core.Config.DlAlbumcoverForPlaylist {
			_, _, safeCoverFilename := utils.EnsureSafePath(baseSaveFolder, finalArtistDir, finalAlbumDir, track.ID+".jpg")
			trackCovPath, err = metadata.WriteCover(finalAlbumFolder, strings.TrimSuffix(safeCoverFilename, ".jpg"), track.Attributes.Artwork.URL)
			if err == nil {
				tags = append(tags, fmt.Sprintf("cover=%s", trackCovPath))
			}
		} else {
			tags = append(tags, fmt.Sprintf("cover=%s", covPath))
		}
	}
	tagsString := strings.Join(tags, ":")
	cmd := exec.Command("MP4Box", "-quiet", "-itags", tagsString, trackPath)
	_ = cmd.Run()
	if strings.Contains(albumId, "pl.") && core.Config.DlAlbumcoverForPlaylist && trackCovPath != "" {
		_ = os.Remove(trackCovPath)
	}

	core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
	return trackPath, nil
}

func Rip(albumId string, storefront string, urlArg_i string, urlRaw string) error {
	mainAccount, err := core.GetAccountForStorefront(storefront)
	if err != nil {
		return err
	}

	meta, err := api.GetMeta(albumId, mainAccount, storefront)
	if err != nil {
		return err
	}
	var lyricAccount *structs.Account
	for i := range core.Config.Accounts {
		acc := &core.Config.Accounts[i]
		if strings.ToLower(acc.Storefront) == strings.ToLower(storefront) {
			lyricAccount = acc
			break
		}
	}

	if lyricAccount == nil && core.Config.DefaultLyricStorefront != "" {
		for i := range core.Config.Accounts {
			acc := &core.Config.Accounts[i]
			if strings.ToLower(acc.Storefront) == strings.ToLower(core.Config.DefaultLyricStorefront) {
				lyricAccount = acc
				break
			}
		}
	}

	if core.Debug_mode {
		if len(meta.Data[0].Relationships.Tracks.Data) > 0 {
			firstTrack := meta.Data[0].Relationships.Tracks.Data[0]
			manifest, err := api.GetInfoFromAdam(firstTrack.ID, mainAccount, storefront)
			if err == nil && manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
				_, _, _, _ = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
			}
		}
		return nil
	}

	var Codec string
	if core.Dl_atmos {
		Codec = "ATMOS"
	} else if core.Dl_aac {
		Codec = "AAC"
	} else {
		Codec = "ALAC"
	}

	var baseSaveFolder string
	var finalSaveFolder string
	var usingCache bool
	if core.Dl_atmos {
		finalSaveFolder = core.Config.AtmosSaveFolder
	} else {
		finalSaveFolder = core.Config.AlacSaveFolder
	}

	// 使用缓存机制
	baseSaveFolder, finalSaveFolder, usingCache = GetCacheBasePath(finalSaveFolder, albumId)

	// 延迟清理函数：如果使用缓存且出错，清理缓存目录
	var downloadSuccess bool
	defer func() {
		if usingCache && !downloadSuccess {
			utils.CleanupCacheDirectory(baseSaveFolder)
		}
	}()

	var singerFoldername, albumFoldername string
	if core.Config.ArtistFolderFormat != "" {
		if strings.Contains(albumId, "pl.") {
			singerFoldername = strings.NewReplacer(
				"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
			).Replace(core.Config.ArtistFolderFormat)
		} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
			).Replace(core.Config.ArtistFolderFormat)
		} else {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", "",
			).Replace(core.Config.ArtistFolderFormat)
		}
	}

	var Quality string

	// Determine Album Quality Tag based on download mode
	// This will be refined later with actual audio information
	var Album_Tag_string string
	if core.Dl_atmos {
		Album_Tag_string = utils.FormatQualityTag("Dolby Atmos")
	} else if core.Dl_aac {
		Album_Tag_string = utils.FormatQualityTag("Aac 256")
	} else {
		// For lossless, we'll determine Hi-Res vs ALAC later based on sample rate
		// For now, use a default that will be updated
		Album_Tag_string = utils.FormatQualityTag("Alac")
	}

	if strings.Contains(albumId, "pl.") {
		albumFoldername = strings.NewReplacer(
			"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", Codec, "{Tag}", Album_Tag_string,
		).Replace(core.Config.PlaylistFolderFormat)
	} else {
		albumFoldername = strings.NewReplacer(
			"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
			"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
			"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
			"{Quality}", Quality, "{Codec}", Codec, "{Tag}", Album_Tag_string,
		).Replace(core.Config.AlbumFolderFormat)
	}

	sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
	sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")

	var longestFilename string
	for i := range meta.Data[0].Relationships.Tracks.Data {
		if len(meta.Data[0].Relationships.Tracks.Data[i].Attributes.Name) > len(longestFilename) {
			longestFilename = meta.Data[0].Relationships.Tracks.Data[i].Attributes.Name
		}
	}
	longestFilename = strings.NewReplacer(
		"{SongName}", longestFilename,
		"{SongNumer}", "99",
		"{Quality}", "24B-192.0kHz",
		"{Tag}", core.Config.AppleMasterChoice+" "+core.Config.ExplicitChoice,
		"{Codec}", "ATMOS",
	).Replace(core.Config.SongFileFormat) + ".m4a"

	finalArtistDir, finalAlbumDir, _ := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, longestFilename)

	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveFolder
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	os.MkdirAll(finalAlbumFolder, os.ModePerm)

	fmt.Printf("歌手: %s\n", meta.Data[0].Attributes.ArtistName)
	fmt.Printf("专辑: %s\n", meta.Data[0].Attributes.Name)

	if core.Config.SaveArtistCover && !(strings.Contains(albumId, "pl.")) {
		if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			_, err = metadata.WriteCover(finalSingerFolder, "folder", meta.Data[0].Relationships.Artists.Data[0].Attributes.Artwork.Url)
			if err != nil {
			}
		}
	}
	covPath, err := metadata.WriteCover(finalAlbumFolder, "cover", meta.Data[0].Attributes.Artwork.URL)
	if err != nil {
	}
	if core.Config.SaveAnimatedArtwork && meta.Data[0].Attributes.EditorialVideo.MotionDetailSquare.Video != "" {
		motionvideoUrlSquare, err := parser.ExtractVideo(meta.Data[0].Attributes.EditorialVideo.MotionDetailSquare.Video)
		if err == nil {
			exists, _ := utils.FileExists(filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"))
			if !exists {
				cmd := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", motionvideoUrlSquare, "-c", "copy", filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"))
				_ = cmd.Run()
			}
		}

		if core.Config.EmbyAnimatedArtwork {
			cmd3 := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"), "-vf", "scale=440:-1", "-r", "24", "-f", "gif", filepath.Join(finalAlbumFolder, "folder.jpg"))
			_ = cmd3.Run()
		}

		motionvideoUrlTall, err := parser.ExtractVideo(meta.Data[0].Attributes.EditorialVideo.MotionDetailTall.Video)
		if err == nil {
			exists, _ := utils.FileExists(filepath.Join(finalAlbumFolder, "tall_animated_artwork.mp4"))
			if !exists {
				cmd := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", motionvideoUrlTall, "-c", "copy", filepath.Join(finalAlbumFolder, "tall_animated_artwork.mp4"))
				_ = cmd.Run()
			}
		}
	}

	selected := ui.SelectTracks(meta, storefront, urlArg_i)

	fmt.Println("正在进行版权预检，请稍候...")
	var workingAccounts []structs.Account
	if len(meta.Data[0].Relationships.Tracks.Data) > 0 {
		firstTrackId := meta.Data[0].Relationships.Tracks.Data[0].ID
		for _, acc := range core.Config.Accounts {
			_, err := api.GetInfoFromAdam(firstTrackId, &acc, acc.Storefront)
			if err == nil {
				workingAccounts = append(workingAccounts, acc)
			} else {
				fmt.Printf("账户 [%s] 无法访问此专辑 (可能无版权)，本次任务将跳过该账户。\n", acc.Name)
			}
		}
	} else {
		return errors.New("专辑中没有曲目")
	}

	if len(workingAccounts) == 0 {
		return errors.New("所有账户均无法访问此专辑，任务中止")
	}

	albumQualityType := "AAC"
	albumQualityString := "AAC"
	isHires := false
	isLossless := false

	for _, trackIndex := range selected {
		track := meta.Data[0].Relationships.Tracks.Data[trackIndex-1]
		if utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
			isHires = true
			break
		}
		if utils.Contains(track.Attributes.AudioTraits, "lossless") {
			isLossless = true
		}
	}

	if isHires {
		albumQualityType = "Hi-Res Lossless"
		albumQualityString = "Hi-Res Lossless"
		// Update Album_Tag_string for Hi-Res Lossless
		if !core.Dl_atmos && !core.Dl_aac {
			Album_Tag_string = utils.FormatQualityTag("Hi-Res Lossless")
		}
	} else if isLossless {
		albumQualityType = "Lossless"
		albumQualityString = "Lossless"
		// Alac tag is already set as default for lossless
	}

	var numThreads int
	switch albumQualityType {
	case "Hi-Res Lossless":
		numThreads = core.Config.HiresDownloadThreads
	case "Lossless":
		numThreads = core.Config.LosslessDownloadThreads
	default: // "AAC"
		numThreads = core.Config.AacDownloadThreads
	}

	if numThreads < 1 {
		numThreads = 1
	}

	regionSet := make(map[string]bool)
	for _, acc := range workingAccounts {
		if acc.Storefront != "" {
			regionSet[strings.ToUpper(acc.Storefront)] = true
		}
	}
	var regionNames []string
	for r := range regionSet {
		regionNames = append(regionNames, r)
	}
	sort.Strings(regionNames)
	regionsStr := strings.Join(regionNames, " / ")

	yellow := color.New(color.FgYellow).SprintFunc()
	green := color.New(color.FgGreen).SprintFunc()
	fmt.Printf("%s %s | %s | %s | %s\n",
		green("音源:"),
		green(albumQualityString),
		green(fmt.Sprintf("%d 线程", numThreads)),
		yellow(regionsStr),
		green(fmt.Sprintf("%d 个账户并行下载", len(workingAccounts))),
	)
	fmt.Println(strings.Repeat("-", 50))

	core.RipLock.Lock()
	defer core.RipLock.Unlock()

	core.TrackStatuses = make([]core.TrackStatus, len(selected))
	for i, trackNum := range selected {
		track := meta.Data[0].Relationships.Tracks.Data[trackNum-1]
		manifest, err := api.GetInfoFromAdam(track.ID, mainAccount, storefront)
		quality := "N/A"
		if err == nil && manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
			_, _, quality, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, false)
			if err != nil {
				quality = "获取失败"
			}
		} else {
			quality = "AAC 256kbps"
		}

		core.TrackStatuses[i] = core.TrackStatus{
			Index:       i,
			TrackNum:    trackNum,
			TrackTotal:  len(meta.Data[0].Relationships.Tracks.Data),
			TrackName:   track.Attributes.Name,
			Quality:     fmt.Sprintf("(%s)", quality),
			Status:      "等待中",
			StatusColor: color.New(color.FgWhite).SprintFunc(),
		}
	}

	doneUI := make(chan struct{})
	go ui.RenderUI(doneUI)

	var wg sync.WaitGroup
	semaphore := make(chan struct{}, numThreads)

	for i, trackNum := range selected {
		wg.Add(1)
		go func(trackIndexInMeta int, statusIndex int) {
			semaphore <- struct{}{}
			defer func() {
				<-semaphore
				wg.Done()
			}()

			trackData := meta.Data[0].Relationships.Tracks.Data[trackIndexInMeta-1]

			core.SharedLock.Lock()
			isDone := utils.IsInArray(core.OkDict[albumId], trackIndexInMeta)
			core.SharedLock.Unlock()

			if isDone {
				ui.UpdateStatus(statusIndex, "已存在", color.New(color.FgCyan).SprintFunc())
				core.SharedLock.Lock()
				core.Counter.Total++
				core.Counter.Success++
				core.SharedLock.Unlock()
				return
			}

			red := color.New(color.FgRed).SprintFunc()
			yellow := color.New(color.FgYellow).SprintFunc()

			const PostDownloadMaxRetries = 3

			for attempt := 1; attempt <= PostDownloadMaxRetries; attempt++ {
				if attempt > 1 {
					ui.UpdateStatus(statusIndex, fmt.Sprintf("第 %d/%d 次重试...", attempt, PostDownloadMaxRetries), yellow)
					time.Sleep(2 * time.Second)
				}

				progressChan := make(chan runv14.ProgressUpdate, 10)
				go func() {
					for p := range progressChan {
						speedStr := utils.FormatSpeed(p.SpeedBPS)
						account := &workingAccounts[statusIndex%len(workingAccounts)]
						accountInfo := fmt.Sprintf("%s 账号", strings.ToUpper(account.Storefront))
						var status string
						if p.Stage == "decrypt" {
							status = fmt.Sprintf("%s %s %d%% (%s)", yellow(accountInfo), red("解密中"), p.Percentage, speedStr)
						} else {
							status = fmt.Sprintf("%s 下载中 %d%% (%s)", yellow(accountInfo), p.Percentage, speedStr)
						}
						ui.UpdateStatus(statusIndex, status, color.New(color.FgYellow).SprintFunc())
					}
				}()

				trackPath, err := downloadTrackWithFallback(trackData, meta, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath, workingAccounts, statusIndex, statusIndex, ui.UpdateStatus, progressChan)
				close(progressChan)

				if err != nil {
					// downloadTrackWithFallback has its own retries. If it fails, we consider it a permanent failure for this track.
					core.SharedLock.Lock()
					core.Counter.Total++
					ui.UpdateStatus(statusIndex, fmt.Sprintf("下载失败: %v", err), red)
					core.Counter.Error++
					core.SharedLock.Unlock()
					return
				}

				var postDownloadError error
				wasFixed := false

				// Step 2: Re-encode if necessary
				if core.Config.FfmpegFix && trackData.Type != "music-videos" {
					isAAC := core.Dl_aac && *core.Aac_type == "aac-lc"
					if !isAAC {
						var fixErr error
						wasFixed, fixErr = checkAndReEncodeTrack(trackPath, statusIndex)
						if fixErr != nil {
							postDownloadError = fmt.Errorf("修复失败: %w", fixErr)
						}
					}
				}

				// Step 3: Write tags (only if previous step was successful)
				if postDownloadError == nil {
					var finalLrc string
					if lyricAccount != nil && (core.Config.EmbedLrc || core.Config.SaveLrcFile) && trackData.Type != "music-videos" {
						lrcStr, lrcErr := lyrics.Get(storefront, trackData.ID, core.Config.LrcType, core.Config.Language, core.Config.LrcFormat, core.DeveloperToken, lyricAccount.MediaUserToken)
						if lrcErr == nil {
							if core.Config.SaveLrcFile {
								lrcFilename := fmt.Sprintf("%s.lrc", strings.TrimSuffix(filepath.Base(trackPath), filepath.Ext(filepath.Base(trackPath))))
								_ = metadata.WriteLyrics(filepath.Dir(trackPath), lrcFilename, lrcStr)
							}
							if core.Config.EmbedLrc {
								finalLrc = lrcStr
							}
						}
					}

					tagErr := metadata.WriteMP4Tags(trackPath, finalLrc, meta, trackIndexInMeta, len(meta.Data[0].Relationships.Tracks.Data))
					if tagErr != nil {
						postDownloadError = fmt.Errorf("标签写入失败: %w", tagErr)
					}
				}

				// Check if any post-download step failed
				if postDownloadError != nil {
					ui.UpdateStatus(statusIndex, postDownloadError.Error(), yellow)
					os.Remove(trackPath) // Delete the problematic file

					if attempt < PostDownloadMaxRetries {
						continue // Go to the next retry attempt
					} else {
						// All retries failed, report final error
						ui.UpdateStatus(statusIndex, fmt.Sprintf("所有重试均失败: %v", postDownloadError), red)
						core.SharedLock.Lock()
						core.Counter.Total++
						core.Counter.Error++
						core.SharedLock.Unlock()
						return
					}
				}

				// All steps successful
				core.SharedLock.Lock()
				core.Counter.Total++
				core.Counter.Success++
				if wasFixed {
					ui.UpdateStatus(statusIndex, "重编码完成", color.New(color.FgRed).SprintFunc())
				} else {
					ui.UpdateStatus(statusIndex, "下载完成", color.New(color.FgGreen).SprintFunc())
				}
				core.SharedLock.Unlock()
				return // Mission accomplished, exit goroutine
			}
		}(trackNum, i)
	}

	wg.Wait()
	close(doneUI)
	time.Sleep(200 * time.Millisecond)
	ui.PrintUI()

	fmt.Println(strings.Repeat("-", 50))

	// 如果使用了缓存，将文件从缓存移动到最终目标
	if usingCache {
		cyan := color.New(color.FgCyan).SprintFunc()
		fmt.Printf("\n%s\n", cyan("正在从缓存转移文件到目标位置..."))

		// 构建源文件夹和目标文件夹的完整路径
		var finalSingerFolder string
		if finalArtistDir != "" {
			finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
		} else {
			finalSingerFolder = baseSaveFolder
		}
		cacheAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)

		// 构建最终目标路径
		var targetSingerFolder string
		if finalArtistDir != "" {
			targetSingerFolder = filepath.Join(finalSaveFolder, finalArtistDir)
		} else {
			targetSingerFolder = finalSaveFolder
		}
		targetAlbumFolder := filepath.Join(targetSingerFolder, finalAlbumDir)

		// 移动专辑文件夹
		if err := utils.SafeMoveDirectory(cacheAlbumFolder, targetAlbumFolder); err != nil {
			fmt.Printf("从缓存移动文件失败: %v\n", err)
			return fmt.Errorf("从缓存移动文件失败: %w", err)
		}

		// 清理缓存目录
		if err := utils.CleanupCacheDirectory(baseSaveFolder); err != nil {
			fmt.Printf("清理缓存目录警告: %v\n", err)
		}

		fmt.Printf("%s\n", color.New(color.FgGreen).SprintFunc()("文件转移完成！"))
	}

	downloadSuccess = true
	return nil
}

func MvDownloader(adamID string, baseSaveDir, artistDir, albumDir string, storefront string, meta *structs.AutoGenerated, account *structs.Account) (string, error) {
	MVInfo, err := api.GetMVInfoFromAdam(adamID, account, storefront)
	if err != nil {
		return "", err
	}

	var trackTotal int
	var trackNum int
	var index int
	if meta != nil {
		trackTotal = len(meta.Data[0].Relationships.Tracks.Data)
		for i, track := range meta.Data[0].Relationships.Tracks.Data {
			if adamID == track.ID {
				index = i
				trackNum = i + 1
			}
		}
	}

	// Extract release year for Emby naming standard
	var releaseYear string
	if len(MVInfo.Data[0].Attributes.ReleaseDate) >= 4 {
		releaseYear = MVInfo.Data[0].Attributes.ReleaseDate[:4]
	}

	// Emby naming standard: {VideoName (Year)}/{VideoName (Year)}.mp4
	// Artist name is already in the parent folder, no need to repeat
	var mvFolderName, mvFileName string
	mvName := core.LimitString(MVInfo.Data[0].Attributes.Name)

	if releaseYear != "" {
		// Format: "VideoName (Year)"
		mvFolderName = fmt.Sprintf("%s (%s)", mvName, releaseYear)
		mvFileName = fmt.Sprintf("%s (%s).mp4", mvName, releaseYear)
	} else {
		// Fallback without year
		mvFolderName = mvName
		mvFileName = fmt.Sprintf("%s.mp4", mvName)
	}

	sanitizedMvFolderName := core.ForbiddenNames.ReplaceAllString(mvFolderName, "_")
	sanitizedMvFileName := core.ForbiddenNames.ReplaceAllString(mvFileName, "_")

	// Use artistDir as sub-folder under MV save folder for organization
	finalArtistDir, finalMvDir, finalFilename := utils.EnsureSafePath(
		baseSaveDir, artistDir, sanitizedMvFolderName, sanitizedMvFileName,
	)

	// Build the final Emby-compatible path structure
	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveDir, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveDir
	}
	finalMvFolder := filepath.Join(finalSingerFolder, finalMvDir)
	mvOutPath := filepath.Join(finalMvFolder, finalFilename)
	os.MkdirAll(finalMvFolder, os.ModePerm)
	exists, _ := utils.FileExists(mvOutPath)
	if exists {
		return mvOutPath, nil
	}

	mvm3u8url, _, err := runv3.GetWebplayback(adamID, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return "", fmt.Errorf("获取MV播放列表失败: %w", err)
	}
	if mvm3u8url == "" {
		return "", errors.New("media-user-token may be wrong or expired")
	}

	vidPath := filepath.Join(finalMvFolder, fmt.Sprintf("%s_vid.mp4", adamID))
	audPath := filepath.Join(finalMvFolder, fmt.Sprintf("%s_aud.mp4", adamID))

	videom3u8url, err := parser.ExtractVideo(mvm3u8url)
	if err != nil {
		return "", fmt.Errorf("提取视频流URL失败: %w", err)
	}
	videokeyAndUrls, err := runv3.Run(adamID, videom3u8url, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return "", fmt.Errorf("获取视频密钥和URL失败: %w", err)
	}
	err = runv3.ExtMvData(videokeyAndUrls, vidPath)
	if err != nil {
		return "", fmt.Errorf("下载或解密视频数据失败: %w", err)
	}

	audiom3u8url, err := parser.ExtractMvAudio(mvm3u8url)
	if err != nil {
		return "", fmt.Errorf("提取音频流URL失败: %w", err)
	}
	audiokeyAndUrls, err := runv3.Run(adamID, audiom3u8url, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return "", fmt.Errorf("获取音频密钥和URL失败: %w", err)
	}
	err = runv3.ExtMvData(audiokeyAndUrls, audPath)
	if err != nil {
		return "", fmt.Errorf("下载或解密视频数据失败: %w", err)
	}

	tags := []string{
		"tool=",
		fmt.Sprintf("artist=%s", MVInfo.Data[0].Attributes.ArtistName),
		fmt.Sprintf("title=%s", MVInfo.Data[0].Attributes.Name),
		fmt.Sprintf("genre=%s", MVInfo.Data[0].Attributes.GenreNames[0]),
		fmt.Sprintf("created=%s", MVInfo.Data[0].Attributes.ReleaseDate),
		fmt.Sprintf("ISRC=%s", MVInfo.Data[0].Attributes.Isrc),
	}

	if MVInfo.Data[0].Attributes.ContentRating == "explicit" {
		tags = append(tags, "rating=1")
	} else if MVInfo.Data[0].Attributes.ContentRating == "clean" {
		tags = append(tags, "rating=2")
	} else {
		tags = append(tags, "rating=0")
	}

	if meta != nil {
		if meta.Data[0].Type == "playlists" && !core.Config.UseSongInfoForPlaylist {
			tags = append(tags, "disk=1/1", fmt.Sprintf("album=%s", meta.Data[0].Attributes.Name), fmt.Sprintf("track=%d", trackNum), fmt.Sprintf("tracknum=%d/%d", trackNum, trackTotal), fmt.Sprintf("album_artist=%s", meta.Data[0].Attributes.ArtistName), fmt.Sprintf("performer=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.ArtistName), fmt.Sprintf("copyright=%s", meta.Data[0].Attributes.Copyright), fmt.Sprintf("UPC=%s", meta.Data[0].Attributes.Upc))
		} else {
			tags = append(tags, fmt.Sprintf("album=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.AlbumName), fmt.Sprintf("disk=%d/%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.DiscNumber, meta.Data[0].Relationships.Tracks.Data[trackTotal-1].Attributes.DiscNumber), fmt.Sprintf("track=%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.TrackNumber), fmt.Sprintf("tracknum=%d/%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.TrackNumber, meta.Data[0].Attributes.TrackCount), fmt.Sprintf("album_artist=%s", meta.Data[0].Attributes.ArtistName), fmt.Sprintf("performer=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.ArtistName), fmt.Sprintf("copyright=%s", meta.Data[0].Attributes.Copyright), fmt.Sprintf("UPC=%s", meta.Data[0].Attributes.Upc))
		}
	} else {
		tags = append(tags, fmt.Sprintf("album=%s", MVInfo.Data[0].Attributes.AlbumName), fmt.Sprintf("disk=%d", MVInfo.Data[0].Attributes.DiscNumber), fmt.Sprintf("track=%d", MVInfo.Data[0].Attributes.TrackNumber), fmt.Sprintf("tracknum=%d", MVInfo.Data[0].Attributes.TrackNumber), fmt.Sprintf("performer=%s", MVInfo.Data[0].Attributes.ArtistName))
	}

	var covPath string
	if true {
		thumbURL := MVInfo.Data[0].Attributes.Artwork.URL
		baseThumbName := core.ForbiddenNames.ReplaceAllString(mvName, "_") + "_thumbnail"
		covPath, err = metadata.WriteCover(finalMvFolder, baseThumbName, thumbURL)
		if err == nil {
			tags = append(tags, fmt.Sprintf("cover=%s", covPath))
		}
	}

	tagsString := strings.Join(tags, ":")
	muxCmd := exec.Command("MP4Box", "-itags", tagsString, "-quiet", "-add", vidPath, "-add", audPath, "-keep-utc", "-new", mvOutPath)
	if err := muxCmd.Run(); err != nil {
		return "", err
	}
	defer os.Remove(vidPath)
	defer os.Remove(audPath)
	if covPath != "" {
		defer os.Remove(covPath)
	}
	return mvOutPath, nil
}
